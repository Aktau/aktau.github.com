<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://www.aktau.be/</id>
  <title>Portfolio and personal blog</title>
  <updated>2014-10-22T22:00:00Z</updated>
  <link rel="alternate" href="http://www.aktau.be/"/>
  <link rel="self" href="http://www.aktau.be/atom.xml"/>
  <author>
    <name>Nicolas Hillegeer</name>
    <uri>http://www.aktau.be/contact</uri>
  </author>
  <entry>
    <id>tag:www.aktau.be,2014-10-23:/2014/10/23/pg-dump-and-pigz-easy-rsyncable-backups-with-postgresql/</id>
    <title type="html">pg_dump and pigz, easy rsyncable backups with PostgreSQL</title>
    <published>2014-10-22T22:00:00Z</published>
    <updated>2014-10-22T22:00:00Z</updated>
    <link rel="alternate" href="http://www.aktau.be/2014/10/23/pg-dump-and-pigz-easy-rsyncable-backups-with-postgresql/"/>
    <content type="html">&lt;p&gt;Some time ago, I created an ad-hoc offsite backup solution for a MySQL
database after I recovered it. This happened after a client contacted me
when one of their legacy databases blew up. The recovery process was
quite painful because the backups that they had were corrupted and
incomplete (a monthly cronjob). I ended up with a simple setup that used
&lt;em&gt;mysqldump&lt;/em&gt;, &lt;em&gt;gzip&lt;/em&gt; and &lt;em&gt;rsnapshot&lt;/em&gt; to great effect. This article talks
about effectively using a similar backup method with PostgreSQL.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id="the-solution-in-mysql-space"&gt;The solution in MySQL-space&lt;/h2&gt;

&lt;p&gt;When preparing to deploy a solution I had made into production, I knew I
needed backups. Its main data store was a PostgreSQL 9.3 database, so I
remembered my MySQL adventure and went looking for similar tools to the
ones I used before. The core of the earlier MySQL solution
looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="c"&gt;# omitting all the rotation logic&lt;/span&gt;
mysqldump &lt;span class="nv"&gt;$OPTIONS&lt;/span&gt; --user&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt; --password&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt; &lt;span class="nv"&gt;$DB&lt;/span&gt; --routines --no-data --add-drop-database --database &lt;span class="nv"&gt;$DB&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; gzip --rsyncable &amp;gt; &lt;span class="s2"&gt;"$DIR/schema.sql.gz"&lt;/span&gt;

&lt;span class="nv"&gt;TABLES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;mysql --user&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt; --password&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt; -Bse &lt;span class="s1"&gt;'show tables'&lt;/span&gt; &lt;span class="nv"&gt;$DB&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; TABLE in &lt;span class="nv"&gt;$TABLES&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nv"&gt;BACKUP_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"$DIR/${TABLE}.sql.gz"&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"dumping $TABLE into $BACKUP_FILE"&lt;/span&gt;
    mysqldump &lt;span class="nv"&gt;$OPTIONS&lt;/span&gt; --user&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt; --password&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt; &lt;span class="nv"&gt;$DB&lt;/span&gt; &lt;span class="nv"&gt;$TABLE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; gzip --rsyncable &amp;gt; &lt;span class="s2"&gt;"$BACKUP_FILE"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This dumps the database as separate files: &lt;code&gt;schema.sql.gz&lt;/code&gt; to setup the
schema and &lt;code&gt;$TABLE.sql.gz&lt;/code&gt; for the row data of each table. This allows
restoring of partial sets of data easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="dev.mysql.com/doc/en/mysqldump.html"&gt;mysqldump&lt;/a&gt; outputs SQL on stdout
by default, which makes it easy to pipe to &lt;code&gt;gzip&lt;/code&gt; to create compressed
archives. Data stored in databases is usually quite compressible, so
piping to &lt;em&gt;gzip&lt;/em&gt; saves a lot of space.&lt;/p&gt;

&lt;p&gt;There’s a catch though. Regular &lt;em&gt;gzip&lt;/em&gt; with no flags has a serious
disadvantage for offsite backup: a small change in the raw data provokes
a large change in the compressed data. This means that every time we
&lt;em&gt;rsync&lt;/em&gt; the latest backup over, it will transfer the entire lot. Said in
another way, the speedup factor reported with the &lt;code&gt;--stats&lt;/code&gt; flag is more
or less 1.00. Classic doubleplusungood.&lt;/p&gt;

&lt;p&gt;That’s why we supply the &lt;code&gt;--rsyncable&lt;/code&gt; flag when compressing the data
with &lt;em&gt;gzip&lt;/em&gt;. This resets the compression dictionary from time to time
such that the blocks are compressed independently. A small change in the
source will thus not change the entire compressed archive and the rsync
delta encoding algorithm can work its magic even on gzipped files!&lt;/p&gt;

&lt;p&gt;Sadly, the &lt;code&gt;--rsyncable&lt;/code&gt; flag is not mainline, it’s a custom patch
carried by debian (and ubuntu). To top it off, it &lt;a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=708423"&gt;seems that the patch
was misapplied for Debian
Wheezy&lt;/a&gt;. It
doesn’t even error out when using that flag for some reason, so I hadn’t
noticed until a few days ago. This effectively brought my rsync speedup
factor to 1.00, poor backup server.&lt;/p&gt;

&lt;p&gt;I went looking for alternatives. One could go for backports, testing
repositories or even custom packages but I’m always apprehensive of such
things in production servers. I looked at &lt;em&gt;lz4&lt;/em&gt; (not available in Debian
Wheezy), &lt;em&gt;bzip2&lt;/em&gt; (slow, large blocks), &lt;em&gt;xz/lzma&lt;/em&gt; until finding what
appeared to be the solution: &lt;a href="http://zlib.net/pigz/"&gt;pigz&lt;/a&gt;. It’s a
parallel implementation of &lt;em&gt;gzip&lt;/em&gt;. It has mainlined support of
&lt;code&gt;--rsyncable&lt;/code&gt; and is in the Wheezy repository.&lt;/p&gt;

&lt;h2 id="backing-up-with-postgres"&gt;Backing up with Postgres&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;mysqldump&lt;/em&gt;’s equivalent in the Postgres world is
&lt;a href="http://www.postgresql.org/docs/devel/static/app-pgdump.html"&gt;pg_dump&lt;/a&gt;.
I like &lt;em&gt;pg_dump&lt;/em&gt; better because it allows dumping in several formats
with accompanying up- and downsides. It also has a sister command
&lt;a href="http://www.postgresql.org/docs/devel/static/app-pgrestore.html"&gt;pg_restore&lt;/a&gt;
allowing much more flexibility when restoring a backup. The 4 output
formats available at the moment of writing are (if you already know them
you can skip the list, it’s mostly from the Postgres docs):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;strong&gt;plain&lt;/strong&gt;: like &lt;em&gt;mysqldump&lt;/em&gt;, mostly SQL queries but with faster data
loading (no &lt;code&gt;INSERT&lt;/code&gt; statements but loading from heredoc-like
buffers). This is the default. The big advantage of this format is
that it is human-readable.&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;custom&lt;/strong&gt;: Output a custom-format archive suitable for input into
pg_restore. Together with the directory output format, this is the
most flexible output format in that it allows manual selection and
reordering of archived items during restore. This format is also
compressed by default. It’s not human-readable though, unless you turn
off compression with &lt;code&gt;-Z0&lt;/code&gt;, in which case opening it in a text editor
will allow one to make sense of a lot of things.&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;directory&lt;/strong&gt;: Output a directory-format archive suitable for input
into &lt;em&gt;pg_restore&lt;/em&gt;. This will create a directory with one file for each
table and blob being dumped, plus a so-called Table of Contents file
describing the dumped objects in a machine-readable format that
&lt;em&gt;pg_restore&lt;/em&gt; can read. A directory format archive can be manipulated
with standard Unix tools; for example, files in an uncompressed
archive can be compressed with the gzip tool. This format is
compressed by default and also supports parallel dumps. This is most
similar to what I had been forcing &lt;em&gt;mysqldump&lt;/em&gt; to do, except that with
&lt;em&gt;pg_dump&lt;/em&gt; you only need one command.&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;tar&lt;/strong&gt;: Output a tar-format archive suitable for input into
pg_restore.  The tar-format is compatible with the directory-format;
extracting a tar-format archive produces a valid directory-format
archive. However, the tar-format does not support compression and has
a limit of 8 GB on the size of individual tables. Also, the relative
order of table data items cannot be changed during restore. try not to
use this as can use &lt;a href="http://serverfault.com/questions/267616/pg-dump-fails-due-to-mistaken-low-disk-space"&gt;a lot of temporary space on your
harddrive&lt;/a&gt;.
This might not only wear the underlying HD out and consume needless
space but also thrash the disk page cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you’re using the directory output format the nifty flag
&lt;code&gt;--jobs&lt;/code&gt; becomes available, allowing parallel dumping.&lt;/p&gt;

&lt;p&gt;It seems that we can get the flexibility of partially restoring a
database without requesting the tables first by choosing the &lt;em&gt;custom&lt;/em&gt; or
&lt;em&gt;directory&lt;/em&gt; methods.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;directory&lt;/em&gt; method creates a folder with some files in it:
&lt;code&gt;2298.dat.gz&lt;/code&gt;, &lt;code&gt;2300.dat.gz&lt;/code&gt;, … and finally &lt;code&gt;toc.dat&lt;/code&gt;. They are
compressed by default, but it’s possible to turn this off by passing the
&lt;code&gt;-Z0&lt;/code&gt; flag to &lt;code&gt;pg_dump&lt;/code&gt;. This allows compressing those files
with an rsync-friendly method afterwards. The downside is that all those
uncompressed bytes will get written to disk (and into the page cache).
The larger your DB, the worse this will become for your system.&lt;/p&gt;

&lt;p&gt;For this reason, the &lt;em&gt;custom&lt;/em&gt; format seems like the best of both worlds.
The output can be piped straight into a compress filter. Curious as to
the performance and rsyncability of a few variations on this theme, I
started benchmarking. The most up-to-date scripts I used are available
in a &lt;a href="https://gist.github.com/aktau/8e19977f96d56000aa95"&gt;gist&lt;/a&gt;,
possibly outdated versions are shown below:&lt;/p&gt;

&lt;p&gt;The first script generates a dump of the database in several formats (my
database is called &lt;em&gt;m2d&lt;/em&gt;, adjust accordingly):&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="c"&gt;# gen.sh&lt;/span&gt;
&lt;span class="nv"&gt;DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"$1"&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt; -d &lt;span class="s2"&gt;"$DIR"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; mkdir -p &lt;span class="s2"&gt;"$DIR"&lt;/span&gt;

&lt;span class="c"&gt;# -Z0 is to force no compression, we supply this flag when we pipe to&lt;/span&gt;
&lt;span class="c"&gt;# our own compressor&lt;/span&gt;
pg_dump -Fc m2d &amp;gt; &lt;span class="s2"&gt;"$DIR/m2d.compr.dump"&lt;/span&gt;
pg_dump -Z0 -Fc m2d &amp;gt; &lt;span class="s2"&gt;"$DIR/m2d.raw.dump"&lt;/span&gt;
pg_dump -Z0 -Fc m2d &lt;span class="p"&gt;|&lt;/span&gt; pigz &amp;gt; &lt;span class="s2"&gt;"$DIR/m2d.pigz.dump.gz"&lt;/span&gt;
pg_dump -Z0 -Fc m2d &lt;span class="p"&gt;|&lt;/span&gt; gzip &amp;gt; &lt;span class="s2"&gt;"$DIR/m2d.gzip.dump.gz"&lt;/span&gt;
pg_dump -Z0 -Fc m2d &lt;span class="p"&gt;|&lt;/span&gt; pigz --rsyncable &amp;gt; &lt;span class="s2"&gt;"$DIR/m2d.arsync.dump.gz"&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The script will generate a few files corresponding to some different
ways of compressing (or not) the output. Run it once to supply a
baseline, make some edits to the database and export again:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./gen.sh orig
&lt;span class="nv"&gt;$ &lt;/span&gt;psql m2d
&lt;span class="c"&gt;# make some changes to the database, try to make a small change in the largest tables&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;./gen.sh changed&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Time to test the rsyncability. I switched to another host and used a
script to rsync every file separately so that I could clearly see the
speedup factor.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="c"&gt;# look out for the speedup factors reported by rsync&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# NOTE&lt;/span&gt;
&lt;span class="c"&gt;#  you'll have to change the HOST variable below to&lt;/span&gt;
&lt;span class="c"&gt;#  point to the host + folder to fetch the files from&lt;/span&gt;

&lt;span class="nv"&gt;HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"vagrant:/home/vagrant/pgdumptests"&lt;/span&gt;

&lt;span class="nv"&gt;ORIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"$1"&lt;/span&gt;
&lt;span class="nv"&gt;NEW&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"$2"&lt;/span&gt;

rsync -avh --stats --progress &lt;span class="nv"&gt;$HOST&lt;/span&gt;/&lt;span class="nv"&gt;$ORIG&lt;/span&gt;/ data/
rsync -avh --stats --progress &lt;span class="nv"&gt;$HOST&lt;/span&gt;/&lt;span class="nv"&gt;$NEW&lt;/span&gt;/m2d.arsync.dump.gz data/
rsync -avh --stats --progress &lt;span class="nv"&gt;$HOST&lt;/span&gt;/&lt;span class="nv"&gt;$NEW&lt;/span&gt;/m2d.compr.dump data/
rsync -avh --stats --progress &lt;span class="nv"&gt;$HOST&lt;/span&gt;/&lt;span class="nv"&gt;$NEW&lt;/span&gt;/m2d.gzip.dump.gz data/
rsync -avh --stats --progress &lt;span class="nv"&gt;$HOST&lt;/span&gt;/&lt;span class="nv"&gt;$NEW&lt;/span&gt;/m2d.pigz.dump.gz data/
rsync -avh --stats --progress &lt;span class="nv"&gt;$HOST&lt;/span&gt;/&lt;span class="nv"&gt;$NEW&lt;/span&gt;/m2d.raw.dump data/&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ran it on the other host like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bench.sh orig changed&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Method&lt;/th&gt;
      &lt;th&gt;File size&lt;/th&gt;
      &lt;th&gt;Speedup&lt;/th&gt;
      &lt;th&gt;Bytes sent&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;uncompressed&lt;/td&gt;
      &lt;td&gt;6.40MB&lt;/td&gt;
      &lt;td&gt;132.77&lt;/td&gt;
      &lt;td&gt;33.01KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;pigz –rsyncable&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;723.35KB&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;15.22&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;42.37KB&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pg_dump compress&lt;/td&gt;
      &lt;td&gt;716.49KB&lt;/td&gt;
      &lt;td&gt;1.17&lt;/td&gt;
      &lt;td&gt;608.14KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pigz&lt;/td&gt;
      &lt;td&gt;686.26KB&lt;/td&gt;
      &lt;td&gt;1.05&lt;/td&gt;
      &lt;td&gt;646.27KB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;gzip&lt;/td&gt;
      &lt;td&gt;689.76KB&lt;/td&gt;
      &lt;td&gt;0.99&lt;/td&gt;
      &lt;td&gt;688.32KB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It seems that if you’re only concerned about bandwidth, the uncompressed
variant is actually best in combination with &lt;em&gt;rsync&lt;/em&gt;). Yet the file size
of my tiny database in uncompressed is &lt;strong&gt;9x&lt;/strong&gt; the size of the compressed
variant. Since I also like to keep backups on the same server as the DB,
that becomes a bit hard to stomach for the relatively small servers I’m
working with.&lt;/p&gt;

&lt;p&gt;The sweet spot between simplicity, low bandwidth off-site backup and low
disk space usage seems to fall straight into the camp of piping the
output of &lt;code&gt;pg_dump&lt;/code&gt; into &lt;code&gt;pigz --rsyncable&lt;/code&gt;. Very respectable delta
encoding speedups (&lt;strong&gt;15x&lt;/strong&gt;) and file size (&lt;strong&gt;9x smaller&lt;/strong&gt;) are within
reach. Take these numbers with a grain of salt because it obviously
depends on what’s in the database. If you’re just storing large binary
blobs in the database, this obviously won’t work nearly as well.&lt;/p&gt;

&lt;p&gt;Since this article is already getting a bit long in the tooth, the
implementation of the off-site backup server with
&lt;a href="http://www.rsnapshot.org/"&gt;rsnapshot&lt;/a&gt; is left up to the reader.&lt;/p&gt;

&lt;h2 id="further-benefits--ideas"&gt;Further benefits &amp;amp; ideas&lt;/h2&gt;

&lt;p&gt;On the side of the backup server, it becomes advantageous to use
something like &lt;a href="http://www.nongnu.org/rdiff-backup/"&gt;rdiff-backup&lt;/a&gt; to be
able to keep an incredible amount of backups using minimal amounts of
space using the same delta encoding as &lt;code&gt;rsync&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The astute reader will notice that it might be a good idea to decompress
the backups before handing them over to &lt;code&gt;rdiff-backup&lt;/code&gt;. From the table
above we can see that the uncompressed format has the highest delta
encoding efficiency. This added efficiency &lt;em&gt;might&lt;/em&gt; cause an
&lt;code&gt;rdiff-backup&lt;/code&gt; based solution to use even less space than the compressed
variant, because the delta’s could be smaller (look at the &lt;em&gt;bytes sent&lt;/em&gt;
column). It depends on the churn rate and the type of data in the
database though.&lt;/p&gt;
</content>
    <summary type="html">&lt;p&gt;Some time ago, I created an ad-hoc offsite backup solution for a MySQL
database after I recovered it. This happened after a client contacted me
when one of their legacy databases blew up. The recovery process was
quite painful because the backups that they had were corrupted and
incomplete (a monthly cronjob). I ended up with a simple setup that used
&lt;em&gt;mysqldump&lt;/em&gt;, &lt;em&gt;gzip&lt;/em&gt; and &lt;em&gt;rsnapshot&lt;/em&gt; to great effect. This article talks
about effectively using a similar backup method with PostgreSQL.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:www.aktau.be,2014-02-12:/2014/02/12/send-imessages-via-the-commandline-on-osx-even-to-yourself/</id>
    <title type="html">Send iMessages via the commandline on OSX, even to yourself</title>
    <published>2014-02-11T23:00:00Z</published>
    <updated>2014-02-11T23:00:00Z</updated>
    <link rel="alternate" href="http://www.aktau.be/2014/02/12/send-imessages-via-the-commandline-on-osx-even-to-yourself/"/>
    <content type="html">&lt;p&gt;Today on HN someone posted a small ruby utility to send iMessages via
the commandline, which piqued my interest. I would love to send messages
to my phone when one of my cronscripts discovers something interesting.
However, the utility doesn’t allow sending to self.&lt;/p&gt;

&lt;p&gt;So I looked around and found a way to get around this restriction, and
it doesn’t even require ruby anymore!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;After realizing the utility worked through applescript &lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, I perused
google to find a way to circumvent the inability to send to self. Lo and
behold, &lt;a href="http://stackoverflow.com/questions/11812184/how-to-send-an-imessage-text-with-applescript-only-in-provided-service"&gt;Stack Overflow has the
answer&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I didn’t like typing: &lt;code&gt;osascript "script" "number" "message"&lt;/code&gt; all the
time, so I looked for &lt;a href="http://hints.macworld.com/article.php?story=20060425140531375"&gt;a way to use it like a normal UNIX
script&lt;/a&gt;.
With this unholy shebang hack, it now looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-applescript"&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nv"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;"$0"&lt;/span&gt; &lt;span class="err"&gt;||&lt;/span&gt; &lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;osascript&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"$@"&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="k"&gt;exit&lt;/span&gt;

&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nb"&gt;run&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;targetBuddyPhone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;targetMessage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="nb"&gt;application&lt;/span&gt; &lt;span class="s2"&gt;"Messages"&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;targetService&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;1st&lt;/span&gt; &lt;span class="nv"&gt;service&lt;/span&gt; &lt;span class="nb"&gt;whose&lt;/span&gt; &lt;span class="nv"&gt;service&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;iMessage&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;targetBuddy&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;buddy&lt;/span&gt; &lt;span class="nv"&gt;targetBuddyPhone&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;targetService&lt;/span&gt;
        &lt;span class="nv"&gt;send&lt;/span&gt; &lt;span class="nv"&gt;targetMessage&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;targetBuddy&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;tell&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nb"&gt;run&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gist version &lt;a href="https://gist.github.com/aktau/8958054"&gt;here&lt;/a&gt;. It’s a bit
more complicated than what’s pasted above because it tries to launch
Messages.app if it isn’t running. Paste that in a file, make it
executable with &lt;code&gt;chmod u+x "thefilename"&lt;/code&gt; and you’re good to go. It
doesn’t even require Ruby, so you can just drop the script in some
folder in your &lt;code&gt;$PATH&lt;/code&gt; and use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;imessage &lt;span class="m"&gt;0487198747&lt;/span&gt; &lt;span class="s2"&gt;"gofinance: your stock AAPL has gone up by 20%"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;imessage &lt;span class="m"&gt;0495876923&lt;/span&gt; &lt;span class="s2"&gt;"knock knock!"&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those are not actual telephone numbers (that I know of), by the way.
There are even more cool things you could do with this. Someone has even
made a &lt;a href="https://46b.it/2012/hacking-with-imessage"&gt;Lisp REPL that works over
iMessage&lt;/a&gt;. Oh the
possibilities!&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;the ruby utility can be found on &lt;a href="https://github.com/chrisfsampaio/imsg"&gt;github&lt;/a&gt;. &lt;a href="#fnref:1" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
    <summary type="html">&lt;p&gt;Today on HN someone posted a small ruby utility to send iMessages via
the commandline, which piqued my interest. I would love to send messages
to my phone when one of my cronscripts discovers something interesting.
However, the utility doesn’t allow sending to self.&lt;/p&gt;

&lt;p&gt;So I looked around and found a way to get around this restriction, and
it doesn’t even require ruby anymore!&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:www.aktau.be,2014-01-31:/2014/01/31/manage-your-app-releases-from-the-commandline-with-github-release/</id>
    <title type="html">Manage your app releases from the commandline with github-release</title>
    <published>2014-01-30T23:00:00Z</published>
    <updated>2014-01-30T23:00:00Z</updated>
    <link rel="alternate" href="http://www.aktau.be/2014/01/31/manage-your-app-releases-from-the-commandline-with-github-release/"/>
    <content type="html">&lt;p&gt;Recently I started on a new side-project:
&lt;a href="https://github.com/aktau/gofinance"&gt;gofinance&lt;/a&gt;. It dowloads and stores
financial data from the likes of Yahoo Finance, Bloomberg et al. It’s
under heavy development but already provides me with a nice way of
viewing my stocks from the commandline. A blog post about it is underway
but I’m waiting until I can get a bit of security analysis code
commited.&lt;/p&gt;

&lt;p&gt;Anyway, I felt the need to upload binaries when I got around to tagging
a usable release. Normally one would go to github after tagging and
pushing, and create the release manually, adding a description and
uploading the binaries.&lt;/p&gt;

&lt;p&gt;Naturally, being a programmer, I wasn’t content with this repetitive
clicking, so I automated the task, and
&lt;a href="https://github.com/aktau/github-release"&gt;github-release&lt;/a&gt; was born.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It makes use of the rather recent &lt;a href="http://developer.github.com/v3/repos/releases/"&gt;github API for managing
releases&lt;/a&gt;, and takes
care of the dirty work for you.&lt;/p&gt;

&lt;p&gt;It also allows you to check the current state of your releases. A small
example of some output I get out of the current version for the
&lt;code&gt;github-release&lt;/code&gt; repo itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;github-release info -u aktau -r github-release
git tags:
- v0.3 &lt;span class="o"&gt;(&lt;/span&gt;commit: https://api.github.com/repos/aktau/github-release/commits/b30980cb2a0850689e9f68a75549e52f73893e0d&lt;span class="o"&gt;)&lt;/span&gt;
- v0.2 &lt;span class="o"&gt;(&lt;/span&gt;commit: https://api.github.com/repos/aktau/github-release/commits/264d2373ef74f60e94726ef37c5a7ee9164412d2&lt;span class="o"&gt;)&lt;/span&gt;
- v0.1 &lt;span class="o"&gt;(&lt;/span&gt;commit: https://api.github.com/repos/aktau/github-release/commits/20fa17d227789813e8a7bc24137d384f8e7e7a33&lt;span class="o"&gt;)&lt;/span&gt;
releases:
-  v0.3, name: &lt;span class="s1"&gt;'v0.3'&lt;/span&gt;, description: &lt;span class="s1"&gt;'v0.3'&lt;/span&gt;, id: 167330, tagged: 30/01/2014 at 23:27, published: 30/01/2014 at 23:27, draft: ✔, prerelease: ✔
  - artifact: darwin-amd64-github-release.tar.bz2, downloads: 0, state: uploaded, &lt;span class="nb"&gt;type&lt;/span&gt;: application/octet-stream, size: 2.0MB, id: 68861
  - artifact: freebsd-amd64-github-release.tar.bz2, downloads: 0, state: uploaded, &lt;span class="nb"&gt;type&lt;/span&gt;: application/octet-stream, size: 2.0MB, id: 68862
  - artifact: linux-amd64-github-release.tar.bz2, downloads: 0, state: uploaded, &lt;span class="nb"&gt;type&lt;/span&gt;: application/octet-stream, size: 2.0MB, id: 68863
  - artifact: windows-amd64-github-release.zip, downloads: 0, state: uploaded, &lt;span class="nb"&gt;type&lt;/span&gt;: application/octet-stream, size: 2.1MB, id: 68864&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So there are 3 tags, and only one of them has a formal github release
(v0.3).  It has 4 artifacts, all about 2MB in size. I’ve automated this
entire process in a  makefile, so all I have to do is run &lt;code&gt;make release&lt;/code&gt;
whenever I’ve made a new tag and presto, it builds all executables,
makes a formal release and uploads the artifacts. Check out the makefile
on the &lt;a href="https://github.com/aktau/github-release"&gt;project page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of this is made infinitely easier by the fact that
&lt;a href="http://golang.org/"&gt;golang&lt;/a&gt; has awesome support for cross-compilation.
I can make a windows binary from the comfort of my OSX environment by
just issuing:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="nv"&gt;$ GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;amd64 &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;windows go build&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And presto, there’s a brand new &lt;code&gt;app.exe&lt;/code&gt; in the directory. This,
combined with the fact that Go generates static binaries that are
entirely self-contained, makes for the easiest distribution and
deployment steps I’ve had in years. It’s at least 1/4th of the reason
why I enjoy making stuff in Go. (others are ease of writing/reading,
speed, great standard library, …). No more rbenv, virtualenv, pip, or
whatever shenanigans the next scripting language du jour comes up with.&lt;/p&gt;
</content>
    <summary type="html">&lt;p&gt;Recently I started on a new side-project:
&lt;a href="https://github.com/aktau/gofinance"&gt;gofinance&lt;/a&gt;. It dowloads and stores
financial data from the likes of Yahoo Finance, Bloomberg et al. It’s
under heavy development but already provides me with a nice way of
viewing my stocks from the commandline. A blog post about it is underway
but I’m waiting until I can get a bit of security analysis code
commited.&lt;/p&gt;

&lt;p&gt;Anyway, I felt the need to upload binaries when I got around to tagging
a usable release. Normally one would go to github after tagging and
pushing, and create the release manually, adding a description and
uploading the binaries.&lt;/p&gt;

&lt;p&gt;Naturally, being a programmer, I wasn’t content with this repetitive
clicking, so I automated the task, and
&lt;a href="https://github.com/aktau/github-release"&gt;github-release&lt;/a&gt; was born.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:www.aktau.be,2013-09-22:/2013/09/22/detecting-interlaced-video-with-ffmpeg/</id>
    <title type="html">Detecting interlaced video with ffmpeg</title>
    <published>2013-09-21T22:00:00Z</published>
    <updated>2013-09-21T22:00:00Z</updated>
    <link rel="alternate" href="http://www.aktau.be/2013/09/22/detecting-interlaced-video-with-ffmpeg/"/>
    <content type="html">&lt;p&gt;Today I had to determine whether a video file is interlaced or not.
This has an effect on which flags I pass to the underlying video player
(&lt;a href="http://mpv.io/"&gt;mpv&lt;/a&gt; in this case) to enable deinterlacing and get rid
of that nasty combing effect.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Searching the internet I found that many people say that you can only
really see if a video is interlaced or not by looking at it frame by
frame. One can’t rely on any metadata present in the video file, which
you can get for example by running
&lt;a href="http://mediainfo.sourceforge.net"&gt;mediainfo&lt;/a&gt; or
&lt;a href="http://www.ffmpeg.org/ffprobe.html"&gt;ffprobe&lt;/a&gt;. It happens quite often
that this metadata is just &lt;em&gt;wrong&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;While this is true, I have no patience for manually viewing each file,
especially because I’m dealing with thousands of user-submitted videos.
So I kept digging and found an automated solution that, while not 100%
accurate, was more than accurate enough. Anything that slipped through
the cracks will be noticed and the users will hopefully notify me.&lt;/p&gt;

&lt;p&gt;It turns out that &lt;strong&gt;ffmpeg&lt;/strong&gt; has a filter called &lt;strong&gt;idet&lt;/strong&gt; that (tries
to) detect interlaced frames, and in my experience is quite good at it.
You’ll need a pretty recent version of ffmpeg for this (later 2012 I
believe, the one in the debian wheezy repository is not recent enough).
Here’s an example of how to use it and what happens when I try it on an
interlaced and non-interlaced file:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="c"&gt;# detect interlacing with the ffmpeg "idet" filter, the more frames&lt;/span&gt;
&lt;span class="c"&gt;# you extract, the better, though it's never 100% accurate&lt;/span&gt;

ffmpeg -filter:v idet &lt;span class="se"&gt;\&lt;/span&gt;
    -frames:v &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -an &lt;span class="se"&gt;\&lt;/span&gt;
    -f rawvideo -y /dev/null &lt;span class="se"&gt;\&lt;/span&gt;
    -i ~/Downloads/some_interlaced_video.mkv
&lt;span class="c"&gt;# Example output (this is interlaced, TFF style)&lt;/span&gt;
&lt;span class="c"&gt;# [Parsed_idet_0 @ 0x1ccf7c0] Single frame detection: TFF:167 BFF:0 Progressive:1 Undetermined:0&lt;/span&gt;
&lt;span class="c"&gt;# [Parsed_idet_0 @ 0x1ccf7c0] Multi frame detection: TFF:168 BFF:0 Progressive:0 Undetermined:0&lt;/span&gt;

ffmpeg -filter:v idet &lt;span class="se"&gt;\&lt;/span&gt;
    -frames:v &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -an &lt;span class="se"&gt;\&lt;/span&gt;
    -f rawvideo -y /dev/null &lt;span class="se"&gt;\&lt;/span&gt;
    -i ~/Downloads/some_non_interlaced_video.mkv
&lt;span class="c"&gt;# Example output (this is not interlaced):&lt;/span&gt;
&lt;span class="c"&gt;# [Parsed_idet_0 @ 0x1bcf720] Single frame detection: TFF:0 BFF:0 Progressive:564 Undetermined:84&lt;/span&gt;
&lt;span class="c"&gt;# [Parsed_idet_0 @ 0x1bcf720] Multi frame detection: TFF:0 BFF:0 Progressive:623 Undetermined:25&lt;/span&gt;

&lt;span class="c"&gt;# flags:&lt;/span&gt;
&lt;span class="c"&gt;# -an            = discard audio, we don't need it&lt;/span&gt;
&lt;span class="c"&gt;# -f rawvideo    = output raw video&lt;/span&gt;
&lt;span class="c"&gt;# -y /dev/null   = discard the output&lt;/span&gt;
&lt;span class="c"&gt;# -i ...         = the input file to check&lt;/span&gt;
&lt;span class="c"&gt;# -frames:v 100  = extract the first 100 frames&lt;/span&gt;
&lt;span class="c"&gt;# -filter:v idet = insert the "idet" filter, which will output whether it has detected interlaced frames&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you see many frames next to &lt;em&gt;TFF&lt;/em&gt; or &lt;em&gt;BFF&lt;/em&gt;, that means a video is
interlaced. On the other hand if there are many in progressive, that
means it’s not interlaced. If undetermined is the majority count, I
guess you better look at the file in person, but that hasn’t happened to
me yet.&lt;/p&gt;

&lt;p&gt;Armed with this new tool I thought it would be a good idea to scan my
entire HD looking and check them all with the &lt;em&gt;idet&lt;/em&gt; filter:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="c"&gt;# scan all files on your HD, uses GNU parallel&lt;/span&gt;
&lt;span class="c"&gt;# I believe this works just as well with standard&lt;/span&gt;
&lt;span class="c"&gt;# xargs though&lt;/span&gt;
locate -0 &lt;span class="s1"&gt;'.mov'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; parallel -0 ./ffmpeg -filter:v idet -frames:v &lt;span class="m"&gt;100&lt;/span&gt; -an -f rawvideo -y /dev/null -i &lt;span class="o"&gt;{}&lt;/span&gt; 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; egrep &lt;span class="s1"&gt;'idet|Input'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It turns out I only had 2, interlaced content indeed is quite rare for
content on a computer, luckily so.&lt;/p&gt;
</content>
    <summary type="html">&lt;p&gt;Today I had to determine whether a video file is interlaced or not.
This has an effect on which flags I pass to the underlying video player
(&lt;a href="http://mpv.io/"&gt;mpv&lt;/a&gt; in this case) to enable deinterlacing and get rid
of that nasty combing effect.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:www.aktau.be,2013-08-13:/2013/08/13/sdl2-2-0-0-released-at-last/</id>
    <title type="html">SDL2 (2.0.0) released at last!</title>
    <published>2013-08-12T22:00:00Z</published>
    <updated>2013-08-12T22:00:00Z</updated>
    <link rel="alternate" href="http://www.aktau.be/2013/08/13/sdl2-2-0-0-released-at-last/"/>
    <content type="html">&lt;p&gt;For the impatient: &lt;a href="http://www.libsdl.org/"&gt;get it here&lt;/a&gt; and read the &lt;a href="http://wiki.libsdl.org/moin.fcg/MigrationGuide"&gt;migration guide&lt;/a&gt;. SDL is an open-source game development library. It’s been a long time coming, and some thought SDL2 was going to follow the path of Duke Nukem Forever: always a spectre on the horizon, but never being released. According to twitter it was in development for 2666 days, but the end result is beautiful.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;For those of you who don’t know, SDL helps developers create cross-platform games by abstracting window creation, input,
networking (with extension libraries), et cetera. In this way, there doesn’t need to be icky conditional compilation based on OS, nor different
input subsystems according to different capabilities and so forth.&lt;/p&gt;

&lt;p&gt;Copied from the mailing list, here are the most important new features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Full 3D hardware acceleration&lt;/li&gt;
  &lt;li&gt;Support for OpenGL 3.0+ in various profiles (core, compatibility, debug, robust, etc)&lt;/li&gt;
  &lt;li&gt;Support for OpenGL ES&lt;/li&gt;
  &lt;li&gt;Support for multiple windows&lt;/li&gt;
  &lt;li&gt;Support for multiple displays&lt;/li&gt;
  &lt;li&gt;Support for multiple audio devices&lt;/li&gt;
  &lt;li&gt;Android and iOS support&lt;/li&gt;
  &lt;li&gt;Simple 2D rendering API that can use Direct3D, OpenGL, OpenGL ES, or software rendering behind the scenes&lt;/li&gt;
  &lt;li&gt;Force Feedback available on Windows, Mac OS X and Linux&lt;/li&gt;
  &lt;li&gt;XInput and XAudio2 support for Windows&lt;/li&gt;
  &lt;li&gt;Atomic operations&lt;/li&gt;
  &lt;li&gt;Power management (exposes battery life remaining, etc)&lt;/li&gt;
  &lt;li&gt;Shaped windows&lt;/li&gt;
  &lt;li&gt;32-bit audio (int and float)&lt;/li&gt;
  &lt;li&gt;Simplified Game Controller API (the Joystick API is still here, too!)&lt;/li&gt;
  &lt;li&gt;Touch support (multitouch, gestures, etc)&lt;/li&gt;
  &lt;li&gt;Better fullscreen support&lt;/li&gt;
  &lt;li&gt;Better keyboard support (scancodes vs keycodes, etc).&lt;/li&gt;
  &lt;li&gt;Message boxes&lt;/li&gt;
  &lt;li&gt;Clipboard support&lt;/li&gt;
  &lt;li&gt;Basic Drag’n’Drop support&lt;/li&gt;
  &lt;li&gt;Proper unicode input and IME support&lt;/li&gt;
  &lt;li&gt;A really powerful assert macro&lt;/li&gt;
  &lt;li&gt;Lots of old annoyances from 1.2 are gone&lt;/li&gt;
  &lt;li&gt;Many other things!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you develop your code with just SDL, (optionally) OpenGL and the standard
C or C++ library, your code is immediately portable to all the operating systems which SDL supports. That includes Android and iPhone by the way. &lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;
So it pays off to use it, especially if you’re in the market to develop games commercially: &lt;strong&gt;write once, run on your toaster&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;SDL also features a drawing API, which is now hardware accelerated when possible thanks to SDL2. They worked very hard on this feature, though I
hardly use it. This is because I choose to perform my drawing with OpenGL. So in short, I just use SDL to open my OpenGL window(s).&lt;/p&gt;

&lt;p&gt;I’m using SDL in my own &lt;a href="https://github.com/warfare/prototype"&gt;toy weekend-project&lt;/a&gt; as well. Since I only started it a month ago I decided
to go with SDL2 even though it was still in release candidate status. It has worked perfectly up until now and has proved that it deserved it’s &lt;strong&gt;rc&lt;/strong&gt; status.
I keep SDL in my source tree (like redis does with its dependencies) so I manually merged the new version and found that most of the changes
were minor (except for haptics support, which I don’t use).&lt;/p&gt;

&lt;p&gt;And because I can’t post and article without a bit of code, here’s the &lt;code&gt;main()&lt;/code&gt; method of my toy project: (yes it’s ugly, but I named it prototype so it’s ok). &lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-c"&gt;&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;math.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdint.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;limits.h&amp;gt;&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * this is mac only, probably gl/gl3.h for linux and something else for win.&lt;/span&gt;
&lt;span class="cm"&gt; * For win we will likely also need glew or another extension loader.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="cp"&gt;#define GL3_PROTOTYPES&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;OpenGL/gl3.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#include "SDL.h"&lt;/span&gt;

&lt;span class="cp"&gt;#include "util.h"&lt;/span&gt;
&lt;span class="cp"&gt;#include "vec.h"&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printGlInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"renderer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"vendor"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"shading_language_version"&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;GL_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;GL_RENDERER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;GL_VENDOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;GL_SHADING_LANGUAGE_VERSION&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ARRAY_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glGetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"could not retrieve %s information, aborting&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;GLint&lt;/span&gt; &lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;GLint&lt;/span&gt; &lt;span class="n"&gt;minor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;glGetIntegerv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_MAJOR_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glGetIntegerv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_MINOR_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;minor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"context version double check: %d.%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;vsync&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;doublebuf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* 16:9 =&amp;gt; 704x440 */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;SDL_Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_INIT_VIDEO&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* set the opengl context version, this is the latest that OSX can handle, for now... */&lt;/span&gt;
    &lt;span class="n"&gt;SDL_GL_SetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_CONTEXT_MAJOR_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SDL_GL_SetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_CONTEXT_MINOR_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_GL_SetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_DOUBLEBUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doublebuf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SDL_GL_SetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_DEPTH_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_GL_SetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_CONTEXT_PROFILE_MASK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SDL_GL_CONTEXT_PROFILE_CORE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_Window&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SDL_CreateWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"SDL2/OpenGL prototype"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;SDL_WINDOWPOS_UNDEFINED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;SDL_WINDOWPOS_UNDEFINED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;SDL_WINDOW_OPENGL&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SDL_WINDOW_RESIZABLE&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_GLContext&lt;/span&gt; &lt;span class="n"&gt;glcontext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SDL_GL_CreateContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;printGlInfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="cm"&gt;/* set the background black */&lt;/span&gt;
    &lt;span class="n"&gt;glClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glClearDepth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glDisable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_DITHER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_Event&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Uint8&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_SetSwapInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vsync&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"could not set desired vsync mode: %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vsync&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"starting to render, vsync is %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SDL_GL_GetSwapInterval&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="n"&gt;setupTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* implementation not shown, lots of tutorials on the net, or check the original source */&lt;/span&gt;
    &lt;span class="n"&gt;GLuint&lt;/span&gt; &lt;span class="n"&gt;vtShader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fgShader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;setupShaders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vtShader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fgShader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;GLuint&lt;/span&gt; &lt;span class="n"&gt;vao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vbo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cbo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ibo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;genTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vbo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cbo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ibo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_PollEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;SDL_WINDOWEVENT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;SDL_WINDOWEVENT_RESIZED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;newWidth&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;newHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                            &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                &lt;span class="s"&gt;"Window %d resized to %dx%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;windowID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;newWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newHeight&lt;/span&gt;
                            &lt;span class="p"&gt;);&lt;/span&gt;

                            &lt;span class="n"&gt;setupTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;SDL_KEYDOWN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;SDL_KEYUP&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keysym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;SDLK_ESCAPE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                            &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;SDLK_v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                            &lt;span class="n"&gt;vsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;vsync&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_SetSwapInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vsync&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"could not set desired vsync mode: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vsync&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"turned vsync %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vsync&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;SDLK_d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                            &lt;span class="n"&gt;doublebuf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;doublebuf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_SetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_DOUBLEBUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doublebuf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"could not set desired doublebuf mode: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doublebuf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"turned doublebuf %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doublebuf&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;SDL_QUIT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="c1"&gt;// default:&lt;/span&gt;
                &lt;span class="c1"&gt;//     trace("unkown even type received: %d\n", event.type);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;SDL_GL_SwapWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;diagFrameDone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/* implementation not shown, lots of tutorials on the net, or check the original source */&lt;/span&gt;
    &lt;span class="n"&gt;destroyTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vbo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cbo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ibo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;destroyShaders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vtShader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fgShader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_GL_DeleteContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glcontext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_DestroyWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SDL_Quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;Okay, you might have to add a bit of effort for iPhone and Android, especially if you’re developing with OpenGL and you haven’t restricted yourself to the OpenGL ES subset. The plaforms’ respective preference for Objective-C and Java might also give some troubles, but at least SDL has been adapted to work with those. &lt;a href="#fnref:1" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;I realized that as an inexperienced game developer, I was going to make a crappy engine before making a decent one. So I decided to not even give my first creation a real name. &lt;a href="#fnref:2" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
    <summary type="html">&lt;p&gt;For the impatient: &lt;a href="http://www.libsdl.org/"&gt;get it here&lt;/a&gt; and read the &lt;a href="http://wiki.libsdl.org/moin.fcg/MigrationGuide"&gt;migration guide&lt;/a&gt;. SDL is an open-source game development library. It’s been a long time coming, and some thought SDL2 was going to follow the path of Duke Nukem Forever: always a spectre on the horizon, but never being released. According to twitter it was in development for 2666 days, but the end result is beautiful.&lt;/p&gt;

</summary>
  </entry>
</feed>
