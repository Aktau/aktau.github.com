<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://www.aktau.be/</id>
  <title>Portfolio and personal blog</title>
  <updated>2014-02-11T23:00:00Z</updated>
  <link rel="alternate" href="http://www.aktau.be/"/>
  <link rel="self" href="http://www.aktau.be/atom.xml"/>
  <author>
    <name>Nicolas Hillegeer</name>
    <uri>http://www.aktau.be/contact</uri>
  </author>
  <entry>
    <id>tag:www.aktau.be,2014-02-12:/2014/02/12/send-imessages-via-the-commandline-on-osx-even-to-yourself/</id>
    <title type="html">Send iMessages via the commandline on OSX, even to yourself</title>
    <published>2014-02-11T23:00:00Z</published>
    <updated>2014-02-11T23:00:00Z</updated>
    <link rel="alternate" href="http://www.aktau.be/2014/02/12/send-imessages-via-the-commandline-on-osx-even-to-yourself/"/>
    <content type="html">&lt;p&gt;Today on HN someone posted a small ruby utility to send iMessages via
the commandline, which piqued my interest. I would love to send messages
to my phone when one of my cronscripts discovers something interesting.
However, the utility doesn’t allow sending to self.&lt;/p&gt;

&lt;p&gt;So I looked around and found a way to get around this restriction, and
it doesn’t even require ruby anymore!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;After realizing the utility worked through applescript &lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, I perused
google to find a way to circumvent the inability to send to self. Lo and
behold, &lt;a href="http://stackoverflow.com/questions/11812184/how-to-send-an-imessage-text-with-applescript-only-in-provided-service"&gt;Stack Overflow has the
answer&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I didn’t like typing: &lt;code&gt;osascript "script" "number" "message"&lt;/code&gt; all the
time, so I looked for &lt;a href="http://hints.macworld.com/article.php?story=20060425140531375"&gt;a way to use it like a normal UNIX
script&lt;/a&gt;.
With this unholy shebang hack, it now looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-applescript"&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nv"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;"$0"&lt;/span&gt; &lt;span class="err"&gt;||&lt;/span&gt; &lt;span class="k"&gt;exit&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;exec&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;osascript&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"$@"&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="k"&gt;exit&lt;/span&gt;

&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nb"&gt;run&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;targetBuddyPhone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;targetMessage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="nb"&gt;application&lt;/span&gt; &lt;span class="s2"&gt;"Messages"&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;targetService&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;1st&lt;/span&gt; &lt;span class="nv"&gt;service&lt;/span&gt; &lt;span class="nb"&gt;whose&lt;/span&gt; &lt;span class="nv"&gt;service&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;iMessage&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;targetBuddy&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;buddy&lt;/span&gt; &lt;span class="nv"&gt;targetBuddyPhone&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;targetService&lt;/span&gt;
        &lt;span class="nv"&gt;send&lt;/span&gt; &lt;span class="nv"&gt;targetMessage&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;targetBuddy&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;tell&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nb"&gt;run&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gist version &lt;a href="https://gist.github.com/aktau/8958054"&gt;here&lt;/a&gt;. It’s a bit
more complicated than what’s pasted above because it tries to launch
Messages.app if it isn’t running. Paste that in a file, make it
executable with &lt;code&gt;chmod u+x "thefilename"&lt;/code&gt; and you’re good to go. It
doesn’t even require Ruby, so you can just drop the script in some
folder in your &lt;code&gt;$PATH&lt;/code&gt; and use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;imessage 0487198747 &lt;span class="s2"&gt;"gofinance: your stock AAPL has gone up by 20%"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;imessage 0495876923 &lt;span class="s2"&gt;"knock knock!"&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those are not actual telephone numbers (that I know of), by the way.
There are even more cool things you could do with this. Someone has even
made a &lt;a href="https://46b.it/2012/hacking-with-imessage"&gt;Lisp REPL that works over
iMessage&lt;/a&gt;. Oh the
possibilities!&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
&lt;li id="fn:1"&gt;
      &lt;p&gt;the ruby utility can be found on &lt;a href="https://github.com/chrisfsampaio/imsg"&gt;github&lt;/a&gt;. &lt;a href="#fnref:1" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content>
    <summary type="html">&lt;p&gt;Today on HN someone posted a small ruby utility to send iMessages via
the commandline, which piqued my interest. I would love to send messages
to my phone when one of my cronscripts discovers something interesting.
However, the utility doesn’t allow sending to self.&lt;/p&gt;

&lt;p&gt;So I looked around and found a way to get around this restriction, and
it doesn’t even require ruby anymore!&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:www.aktau.be,2014-01-31:/2014/01/31/manage-your-app-releases-from-the-commandline-with-github-release/</id>
    <title type="html">Manage your app releases from the commandline with github-release</title>
    <published>2014-01-30T23:00:00Z</published>
    <updated>2014-01-30T23:00:00Z</updated>
    <link rel="alternate" href="http://www.aktau.be/2014/01/31/manage-your-app-releases-from-the-commandline-with-github-release/"/>
    <content type="html">&lt;p&gt;Recently I started on a new side-project:
&lt;a href="https://github.com/aktau/gofinance"&gt;gofinance&lt;/a&gt;. It dowloads and stores
financial data from the likes of Yahoo Finance, Bloomberg et al. It’s
under heavy development but already provides me with a nice way of
viewing my stocks from the commandline. A blog post about it is underway
but I’m waiting until I can get a bit of security analysis code
commited.&lt;/p&gt;

&lt;p&gt;Anyway, I felt the need to upload binaries when I got around to tagging
a usable release. Normally one would go to github after tagging and
pushing, and create the release manually, adding a description and
uploading the binaries.&lt;/p&gt;

&lt;p&gt;Naturally, being a programmer, I wasn’t content with this repetitive
clicking, so I automated the task, and
&lt;a href="https://github.com/aktau/github-release"&gt;github-release&lt;/a&gt; was born.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;It makes use of the rather recent &lt;a href="http://developer.github.com/v3/repos/releases/"&gt;github API for managing
releases&lt;/a&gt;, and takes
care of the dirty work for you.&lt;/p&gt;

&lt;p&gt;It also allows you to check the current state of your releases. A small
example of some output I get out of the current version for the
&lt;code&gt;github-release&lt;/code&gt; repo itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;github-release info -u aktau -r github-release
git tags:
- v0.3 &lt;span class="o"&gt;(&lt;/span&gt;commit: https://api.github.com/repos/aktau/github-release/commits/b30980cb2a0850689e9f68a75549e52f73893e0d&lt;span class="o"&gt;)&lt;/span&gt;
- v0.2 &lt;span class="o"&gt;(&lt;/span&gt;commit: https://api.github.com/repos/aktau/github-release/commits/264d2373ef74f60e94726ef37c5a7ee9164412d2&lt;span class="o"&gt;)&lt;/span&gt;
- v0.1 &lt;span class="o"&gt;(&lt;/span&gt;commit: https://api.github.com/repos/aktau/github-release/commits/20fa17d227789813e8a7bc24137d384f8e7e7a33&lt;span class="o"&gt;)&lt;/span&gt;
releases:
-  v0.3, name: &lt;span class="s1"&gt;'v0.3'&lt;/span&gt;, description: &lt;span class="s1"&gt;'v0.3'&lt;/span&gt;, id: 167330, tagged: 30/01/2014 at 23:27, published: 30/01/2014 at 23:27, draft: ✔, prerelease: ✔
  - artifact: darwin-amd64-github-release.tar.bz2, downloads: 0, state: uploaded, &lt;span class="nb"&gt;type&lt;/span&gt;: application/octet-stream, size: 2.0MB, id: 68861
  - artifact: freebsd-amd64-github-release.tar.bz2, downloads: 0, state: uploaded, &lt;span class="nb"&gt;type&lt;/span&gt;: application/octet-stream, size: 2.0MB, id: 68862
  - artifact: linux-amd64-github-release.tar.bz2, downloads: 0, state: uploaded, &lt;span class="nb"&gt;type&lt;/span&gt;: application/octet-stream, size: 2.0MB, id: 68863
  - artifact: windows-amd64-github-release.zip, downloads: 0, state: uploaded, &lt;span class="nb"&gt;type&lt;/span&gt;: application/octet-stream, size: 2.1MB, id: 68864&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So there are 3 tags, and only one of them has a formal github release
(v0.3).  It has 4 artifacts, all about 2MB in size. I’ve automated this
entire process in a  makefile, so all I have to do is run &lt;code&gt;make release&lt;/code&gt;
whenever I’ve made a new tag and presto, it builds all executables,
makes a formal release and uploads the artifacts. Check out the makefile
on the &lt;a href="https://github.com/aktau/github-release"&gt;project page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of this is made infinitely easier by the fact that
&lt;a href="http://golang.org/"&gt;golang&lt;/a&gt; has awesome support for cross-compilation.
I can make a windows binary from the comfort of my OSX environment by
just issuing:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="nv"&gt;$ GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;amd64 &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;windows go build&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And presto, there’s a brand new &lt;code&gt;app.exe&lt;/code&gt; in the directory. This,
combined with the fact that Go generates static binaries that are
entirely self-contained, makes for the easiest distribution and
deployment steps I’ve had in years. It’s at least 1/4th of the reason
why I enjoy making stuff in Go. (others are ease of writing/reading,
speed, great standard library, …). No more rbenv, virtualenv, pip, or
whatever shenanigans the next scripting language du jour comes up with.&lt;/p&gt;</content>
    <summary type="html">&lt;p&gt;Recently I started on a new side-project:
&lt;a href="https://github.com/aktau/gofinance"&gt;gofinance&lt;/a&gt;. It dowloads and stores
financial data from the likes of Yahoo Finance, Bloomberg et al. It’s
under heavy development but already provides me with a nice way of
viewing my stocks from the commandline. A blog post about it is underway
but I’m waiting until I can get a bit of security analysis code
commited.&lt;/p&gt;

&lt;p&gt;Anyway, I felt the need to upload binaries when I got around to tagging
a usable release. Normally one would go to github after tagging and
pushing, and create the release manually, adding a description and
uploading the binaries.&lt;/p&gt;

&lt;p&gt;Naturally, being a programmer, I wasn’t content with this repetitive
clicking, so I automated the task, and
&lt;a href="https://github.com/aktau/github-release"&gt;github-release&lt;/a&gt; was born.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:www.aktau.be,2013-09-22:/2013/09/22/detecting-interlaced-video-with-ffmpeg/</id>
    <title type="html">Detecting interlaced video with ffmpeg</title>
    <published>2013-09-21T22:00:00Z</published>
    <updated>2013-09-21T22:00:00Z</updated>
    <link rel="alternate" href="http://www.aktau.be/2013/09/22/detecting-interlaced-video-with-ffmpeg/"/>
    <content type="html">&lt;p&gt;Today I had to determine whether a video file is interlaced or not.
This has an effect on which flags I pass to the underlying video player
(&lt;a href="http://mpv.io/"&gt;mpv&lt;/a&gt; in this case) to enable deinterlacing and get rid
of that nasty combing effect.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Searching the internet I found that many people say that you can only
really see if a video is interlaced or not by looking at it frame by
frame. One can’t rely on any metadata present in the video file, which
you can get for example by running
&lt;a href="http://mediainfo.sourceforge.net"&gt;mediainfo&lt;/a&gt; or
&lt;a href="http://www.ffmpeg.org/ffprobe.html"&gt;ffprobe&lt;/a&gt;. It happens quite often
that this metadata is just &lt;em&gt;wrong&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;While this is true, I have no patience for manually viewing each file,
especially because I’m dealing with thousands of user-submitted videos.
So I kept digging and found an automated solution that, while not 100%
accurate, was more than accurate enough. Anything that slipped through
the cracks will be noticed and the users will hopefully notify me.&lt;/p&gt;

&lt;p&gt;It turns out that &lt;strong&gt;ffmpeg&lt;/strong&gt; has a filter called &lt;strong&gt;idet&lt;/strong&gt; that (tries
to) detect interlaced frames, and in my experience is quite good at it.
You’ll need a pretty recent version of ffmpeg for this (later 2012 I
believe, the one in the debian wheezy repository is not recent enough).
Here’s an example of how to use it and what happens when I try it on an
interlaced and non-interlaced file:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="c"&gt;# detect interlacing with the ffmpeg "idet" filter, the more frames&lt;/span&gt;
&lt;span class="c"&gt;# you extract, the better, though it's never 100% accurate&lt;/span&gt;

ffmpeg -filter:v idet &lt;span class="se"&gt;\&lt;/span&gt;
    -frames:v 100 &lt;span class="se"&gt;\&lt;/span&gt;
    -an &lt;span class="se"&gt;\&lt;/span&gt;
    -f rawvideo -y /dev/null &lt;span class="se"&gt;\&lt;/span&gt;
    -i ~/Downloads/some_interlaced_video.mkv
&lt;span class="c"&gt;# Example output (this is interlaced, TFF style)&lt;/span&gt;
&lt;span class="c"&gt;# [Parsed_idet_0 @ 0x1ccf7c0] Single frame detection: TFF:167 BFF:0 Progressive:1 Undetermined:0&lt;/span&gt;
&lt;span class="c"&gt;# [Parsed_idet_0 @ 0x1ccf7c0] Multi frame detection: TFF:168 BFF:0 Progressive:0 Undetermined:0&lt;/span&gt;

ffmpeg -filter:v idet &lt;span class="se"&gt;\&lt;/span&gt;
    -frames:v 100 &lt;span class="se"&gt;\&lt;/span&gt;
    -an &lt;span class="se"&gt;\&lt;/span&gt;
    -f rawvideo -y /dev/null &lt;span class="se"&gt;\&lt;/span&gt;
    -i ~/Downloads/some_non_interlaced_video.mkv
&lt;span class="c"&gt;# Example output (this is not interlaced):&lt;/span&gt;
&lt;span class="c"&gt;# [Parsed_idet_0 @ 0x1bcf720] Single frame detection: TFF:0 BFF:0 Progressive:564 Undetermined:84&lt;/span&gt;
&lt;span class="c"&gt;# [Parsed_idet_0 @ 0x1bcf720] Multi frame detection: TFF:0 BFF:0 Progressive:623 Undetermined:25&lt;/span&gt;

&lt;span class="c"&gt;# flags:&lt;/span&gt;
&lt;span class="c"&gt;# -an            = discard audio, we don't need it&lt;/span&gt;
&lt;span class="c"&gt;# -f rawvideo    = output raw video&lt;/span&gt;
&lt;span class="c"&gt;# -y /dev/null   = discard the output&lt;/span&gt;
&lt;span class="c"&gt;# -i ...         = the input file to check&lt;/span&gt;
&lt;span class="c"&gt;# -frames:v 100  = extract the first 100 frames&lt;/span&gt;
&lt;span class="c"&gt;# -filter:v idet = insert the "idet" filter, which will output whether it has detected interlaced frames&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you see many frames next to &lt;em&gt;TFF&lt;/em&gt; or &lt;em&gt;BFF&lt;/em&gt;, that means a video is
interlaced. On the other hand if there are many in progressive, that
means it’s not interlaced. If undetermined is the majority count, I
guess you better look at the file in person, but that hasn’t happened to
me yet.&lt;/p&gt;

&lt;p&gt;Armed with this new tool I thought it would be a good idea to scan my
entire HD looking and check them all with the &lt;em&gt;idet&lt;/em&gt; filter:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="c"&gt;# scan all files on your HD, uses GNU parallel&lt;/span&gt;
&lt;span class="c"&gt;# I believe this works just as well with standard&lt;/span&gt;
&lt;span class="c"&gt;# xargs though&lt;/span&gt;
locate -0 &lt;span class="s1"&gt;'.mov'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; parallel -0 ./ffmpeg -filter:v idet -frames:v 100 -an -f rawvideo -y /dev/null -i &lt;span class="o"&gt;{}&lt;/span&gt; 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1 &lt;span class="p"&gt;|&lt;/span&gt; egrep &lt;span class="s1"&gt;'idet|Input'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It turns out I only had 2, interlaced content indeed is quite rare for
content on a computer, luckily so.&lt;/p&gt;</content>
    <summary type="html">&lt;p&gt;Today I had to determine whether a video file is interlaced or not.
This has an effect on which flags I pass to the underlying video player
(&lt;a href="http://mpv.io/"&gt;mpv&lt;/a&gt; in this case) to enable deinterlacing and get rid
of that nasty combing effect.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:www.aktau.be,2013-08-13:/2013/08/13/sdl2-2-0-0-released-at-last/</id>
    <title type="html">SDL2 (2.0.0) released at last!</title>
    <published>2013-08-12T22:00:00Z</published>
    <updated>2013-08-12T22:00:00Z</updated>
    <link rel="alternate" href="http://www.aktau.be/2013/08/13/sdl2-2-0-0-released-at-last/"/>
    <content type="html">&lt;p&gt;For the impatient: &lt;a href="http://www.libsdl.org/"&gt;get it here&lt;/a&gt; and read the &lt;a href="http://wiki.libsdl.org/moin.fcg/MigrationGuide"&gt;migration guide&lt;/a&gt;. SDL is an open-source game development library. It’s been a long time coming, and some thought SDL2 was going to follow the path of Duke Nukem Forever: always a spectre on the horizon, but never being released. According to twitter it was in development for 2666 days, but the end result is beautiful.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;For those of you who don’t know, SDL helps developers create cross-platform games by abstracting window creation, input,
networking (with extension libraries), et cetera. In this way, there doesn’t need to be icky conditional compilation based on OS, nor different
input subsystems according to different capabilities and so forth.&lt;/p&gt;

&lt;p&gt;Copied from the mailing list, here are the most important new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full 3D hardware acceleration&lt;/li&gt;
  &lt;li&gt;Support for OpenGL 3.0+ in various profiles (core, compatibility, debug, robust, etc)&lt;/li&gt;
  &lt;li&gt;Support for OpenGL ES&lt;/li&gt;
  &lt;li&gt;Support for multiple windows&lt;/li&gt;
  &lt;li&gt;Support for multiple displays&lt;/li&gt;
  &lt;li&gt;Support for multiple audio devices&lt;/li&gt;
  &lt;li&gt;Android and iOS support&lt;/li&gt;
  &lt;li&gt;Simple 2D rendering API that can use Direct3D, OpenGL, OpenGL ES, or software rendering behind the scenes&lt;/li&gt;
  &lt;li&gt;Force Feedback available on Windows, Mac OS X and Linux&lt;/li&gt;
  &lt;li&gt;XInput and XAudio2 support for Windows&lt;/li&gt;
  &lt;li&gt;Atomic operations&lt;/li&gt;
  &lt;li&gt;Power management (exposes battery life remaining, etc)&lt;/li&gt;
  &lt;li&gt;Shaped windows&lt;/li&gt;
  &lt;li&gt;32-bit audio (int and float)&lt;/li&gt;
  &lt;li&gt;Simplified Game Controller API (the Joystick API is still here, too!)&lt;/li&gt;
  &lt;li&gt;Touch support (multitouch, gestures, etc)&lt;/li&gt;
  &lt;li&gt;Better fullscreen support&lt;/li&gt;
  &lt;li&gt;Better keyboard support (scancodes vs keycodes, etc).&lt;/li&gt;
  &lt;li&gt;Message boxes&lt;/li&gt;
  &lt;li&gt;Clipboard support&lt;/li&gt;
  &lt;li&gt;Basic Drag’n’Drop support&lt;/li&gt;
  &lt;li&gt;Proper unicode input and IME support&lt;/li&gt;
  &lt;li&gt;A really powerful assert macro&lt;/li&gt;
  &lt;li&gt;Lots of old annoyances from 1.2 are gone&lt;/li&gt;
  &lt;li&gt;Many other things!&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;If you develop your code with just SDL, (optionally) OpenGL and the standard
C or C++ library, your code is immediately portable to all the operating systems which SDL supports. That includes Android and iPhone by the way. &lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;
So it pays off to use it, especially if you’re in the market to develop games commercially: &lt;strong&gt;write once, run on your toaster&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;SDL also features a drawing API, which is now hardware accelerated when possible thanks to SDL2. They worked very hard on this feature, though I
hardly use it. This is because I choose to perform my drawing with OpenGL. So in short, I just use SDL to open my OpenGL window(s).&lt;/p&gt;

&lt;p&gt;I’m using SDL in my own &lt;a href="https://github.com/warfare/prototype"&gt;toy weekend-project&lt;/a&gt; as well. Since I only started it a month ago I decided
to go with SDL2 even though it was still in release candidate status. It has worked perfectly up until now and has proved that it deserved it’s &lt;strong&gt;rc&lt;/strong&gt; status.
I keep SDL in my source tree (like redis does with its dependencies) so I manually merged the new version and found that most of the changes
were minor (except for haptics support, which I don’t use).&lt;/p&gt;

&lt;p&gt;And because I can’t post and article without a bit of code, here’s the &lt;code&gt;main()&lt;/code&gt; method of my toy project: (yes it’s ugly, but I named it prototype so it’s ok). &lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-c"&gt;&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;math.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdint.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;limits.h&amp;gt;&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * this is mac only, probably gl/gl3.h for linux and something else for win.&lt;/span&gt;
&lt;span class="cm"&gt; * For win we will likely also need glew or another extension loader.&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="cp"&gt;#define GL3_PROTOTYPES&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;OpenGL/gl3.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#include "SDL.h"&lt;/span&gt;

&lt;span class="cp"&gt;#include "util.h"&lt;/span&gt;
&lt;span class="cp"&gt;#include "vec.h"&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printGlInfo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"renderer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"vendor"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"shading_language_version"&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;GL_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;GL_RENDERER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;GL_VENDOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;GL_SHADING_LANGUAGE_VERSION&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ARRAY_SIZE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;glGetString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"could not retrieve %s information, aborting&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;GLint&lt;/span&gt; &lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;GLint&lt;/span&gt; &lt;span class="n"&gt;minor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;glGetIntegerv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_MAJOR_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glGetIntegerv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_MINOR_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;minor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"context version double check: %d.%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;vsync&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;doublebuf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* 16:9 =&amp;gt; 704x440 */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;SDL_Init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_INIT_VIDEO&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* set the opengl context version, this is the latest that OSX can handle, for now... */&lt;/span&gt;
    &lt;span class="n"&gt;SDL_GL_SetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_CONTEXT_MAJOR_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SDL_GL_SetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_CONTEXT_MINOR_VERSION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_GL_SetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_DOUBLEBUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doublebuf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SDL_GL_SetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_DEPTH_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_GL_SetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_CONTEXT_PROFILE_MASK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SDL_GL_CONTEXT_PROFILE_CORE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_Window&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SDL_CreateWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;"SDL2/OpenGL prototype"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;SDL_WINDOWPOS_UNDEFINED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;SDL_WINDOWPOS_UNDEFINED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;SDL_WINDOW_OPENGL&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;SDL_WINDOW_RESIZABLE&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_GLContext&lt;/span&gt; &lt;span class="n"&gt;glcontext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SDL_GL_CreateContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;printGlInfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="cm"&gt;/* set the background black */&lt;/span&gt;
    &lt;span class="n"&gt;glClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glClearDepth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;glDisable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL_DITHER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_Event&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Uint8&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_SetSwapInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vsync&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"could not set desired vsync mode: %d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vsync&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"starting to render, vsync is %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SDL_GL_GetSwapInterval&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="n"&gt;setupTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* implementation not shown, lots of tutorials on the net, or check the original source */&lt;/span&gt;
    &lt;span class="n"&gt;GLuint&lt;/span&gt; &lt;span class="n"&gt;vtShader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fgShader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;setupShaders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vtShader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fgShader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;GLuint&lt;/span&gt; &lt;span class="n"&gt;vao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vbo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cbo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ibo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;genTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vbo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cbo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ibo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_PollEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;SDL_WINDOWEVENT&lt;/span&gt;:
                    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;SDL_WINDOWEVENT_RESIZED&lt;/span&gt;:
                        &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;newWidth&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;newHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                            &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                &lt;span class="s"&gt;"Window %d resized to %dx%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;windowID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                &lt;span class="n"&gt;newWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newHeight&lt;/span&gt;
                            &lt;span class="p"&gt;);&lt;/span&gt;

                            &lt;span class="n"&gt;setupTransform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;SDL_KEYDOWN&lt;/span&gt;:
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;SDL_KEYUP&lt;/span&gt;:
                    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keysym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;SDLK_ESCAPE&lt;/span&gt;:
                            &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;SDLK_v&lt;/span&gt;:
                            &lt;span class="n"&gt;vsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;vsync&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_SetSwapInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vsync&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"could not set desired vsync mode: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vsync&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"turned vsync %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vsync&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;SDLK_d&lt;/span&gt;:
                            &lt;span class="n"&gt;doublebuf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;doublebuf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_SetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDL_GL_DOUBLEBUFFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doublebuf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"could not set desired doublebuf mode: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doublebuf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"turned doublebuf %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doublebuf&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;SDL_QUIT&lt;/span&gt;:
                    &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="c1"&gt;// default:&lt;/span&gt;
                &lt;span class="c1"&gt;//     trace("unkown even type received: %d\n", event.type);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;SDL_GL_SwapWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;diagFrameDone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/* implementation not shown, lots of tutorials on the net, or check the original source */&lt;/span&gt;
    &lt;span class="n"&gt;destroyTriangle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vao&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vbo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;cbo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ibo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;destroyShaders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vtShader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;fgShader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_GL_DeleteContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glcontext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;SDL_DestroyWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SDL_Quit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
&lt;li id="fn:1"&gt;
      &lt;p&gt;Okay, you might have to add a bit of effort for iPhone and Android, especially if you’re developing with OpenGL and you haven’t restricted yourself to the OpenGL ES subset. The plaforms’ respective preference for Objective-C and Java might also give some troubles, but at least SDL has been adapted to work with those. &lt;a href="#fnref:1" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;I realized that as an inexperienced game developer, I was going to make a crappy engine before making a decent one. So I decided to not even give my first creation a real name. &lt;a href="#fnref:2" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content>
    <summary type="html">&lt;p&gt;For the impatient: &lt;a href="http://www.libsdl.org/"&gt;get it here&lt;/a&gt; and read the &lt;a href="http://wiki.libsdl.org/moin.fcg/MigrationGuide"&gt;migration guide&lt;/a&gt;. SDL is an open-source game development library. It’s been a long time coming, and some thought SDL2 was going to follow the path of Duke Nukem Forever: always a spectre on the horizon, but never being released. According to twitter it was in development for 2666 days, but the end result is beautiful.&lt;/p&gt;

</summary>
  </entry>
  <entry>
    <id>tag:www.aktau.be,2013-08-07:/2013/08/07/a-makefile-for-modern-c-programming-on-unix-like-operating-systems/</id>
    <title type="html">A makefile for modern C programming on UNIX-like operating systems</title>
    <published>2013-08-06T22:00:00Z</published>
    <updated>2013-08-06T22:00:00Z</updated>
    <link rel="alternate" href="http://www.aktau.be/2013/08/07/a-makefile-for-modern-c-programming-on-unix-like-operating-systems/"/>
    <content type="html">&lt;p&gt;Looking for an easy to use build tool? Project not yet large enough to
warrant cmake? Downright scared of autotools (which generates the
scariest kind of makefiles)? May I present… make!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Most of you have probably seen what a makefile looks like, either from
another open source project or automatically generated by tools like
&lt;a href="http://orwelldevcpp.blogspot.de/"&gt;Dev-C++&lt;/a&gt; &lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; or (god forbid)
autotools. They usually have one thing in common: &lt;strong&gt;they’re horrendous,
unreadable messes&lt;/strong&gt;. And it makes you never want to touch make with a
10-foot pole.&lt;/p&gt;

&lt;p&gt;It was just recently that I learned that it didn’t have to be that way,
make can be small and simple. Let’s start with the simplest of
makefiles, which compiles a single .c file into an application. Save the
following into a file with the name Makefile, next to a main.c file.
&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-make"&gt;&lt;span class="nf"&gt;myapp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;main.c&lt;/span&gt;
    gcc -o myapp main.c -I.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run it, execute:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make myapp
&lt;span class="c"&gt;# or... absent a specific target, make will&lt;/span&gt;
&lt;span class="c"&gt;# just execute the first one it finds.&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;make&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(if you get strange errors when you try this, it’s because you haven’t
been indenting your lines with a TAB-character. Make explicitly requires
that lines be indented with tabs or it will throw a hissy fit and spout
poorly worded error messages from which it is impossible to infer that
it actually wants tabs.)&lt;/p&gt;

&lt;p&gt;So, what does this do? Make will try to create the target (&lt;strong&gt;myapp&lt;/strong&gt;) by
checking if the dependencies (&lt;strong&gt;main.c&lt;/strong&gt;) exist or have been modified
more recently than an already existing &lt;strong&gt;myapp&lt;/strong&gt;. The way to produce the
target from the dependencies is specified by the rule, in this case the
&lt;strong&gt;gcc&lt;/strong&gt; invocation. IF &lt;strong&gt;myapp&lt;/strong&gt; already exists and is more recent than
&lt;strong&gt;main.c&lt;/strong&gt;, nothing happens:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make
gcc -o myapp main.c -I.

&lt;span class="nv"&gt;$ &lt;/span&gt;make
make: Nothing to be &lt;span class="k"&gt;done for&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;all&lt;span class="err"&gt;'&lt;/span&gt;.

&lt;span class="nv"&gt;$ &lt;/span&gt;edit main.c
&lt;span class="nv"&gt;$ &lt;/span&gt;make
gcc -o myapp main.c -I.

&lt;span class="nv"&gt;$ &lt;/span&gt;rm myapp &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make
gcc -o myapp main.c -I.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If one of the dependencies is missing and make doesn’t know how to make
it (with another rule), make will error out.  Likewise if one of the
steps produces an error, make will stop (unless specifically told to
ignore the error).&lt;/p&gt;

&lt;p&gt;Put more abstractly, make is just trying to produce output, which look
like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-make"&gt;&lt;span class="nf"&gt;&amp;lt;output&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &amp;lt;steps to make output from dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, in these terms, make’s reasoning becomes clearer: to get &lt;em&gt;output&lt;/em&gt;
&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" class="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;, I need &lt;em&gt;dependencies&lt;/em&gt; and then I need to run &lt;em&gt;steps to make
output from dependencies&lt;/em&gt;. If the dependencies are lacking, make will
try to make them if it has a rule for them. Please note that the part
called output is often also called a target.&lt;/p&gt;

&lt;p&gt;In the case above, &lt;em&gt;main.c&lt;/em&gt; already exists, so it doesn’t need to be made. Lucky for us,
as we didn’t specify a rule to make &lt;em&gt;main.c&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In most C projects, there’s a tendency to first generate the object (.o) files and then
generate the application from them. Doing this presents a nice opportunity to show multiple
rules working in tandem:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-make"&gt;&lt;span class="nf"&gt;myapp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;main.o&lt;/span&gt;
    gcc main.o -o myapp -I.

&lt;span class="nf"&gt;main.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;main.c&lt;/span&gt;
    gcc -c main.c -o main.o&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we’re first compiling to object files and then linking them together into
an executable, great! But what if we want to add another file? Suppose we have
another file called helper.c that we want to compile and link into our executable,
we could do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-make"&gt;&lt;span class="nf"&gt;myapp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;main.o helper.o&lt;/span&gt;
    gcc main.o helper.o -o myapp -I.

&lt;span class="nf"&gt;main.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;main.c&lt;/span&gt;
    gcc -c main.c -o main.o

&lt;span class="nf"&gt;helper.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;helper.c&lt;/span&gt;
    gcc -c helper.c -o helper.o&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we added helper.o as a new dependency for myapp, and that we specified
a rule for how to build helper.o from helper.c.&lt;/p&gt;

&lt;p&gt;This works perfectly fine, but it’s getting kind of repetitive. Is there no way we
can fold the two last rules into one? Basically the only thing that differs
between them is the filename.&lt;/p&gt;

&lt;p&gt;Sure, but that’s usually where it gets hairy for someone not accustomed to make.
Make has some special variables you can use inside of a rules to get rid of
the redundancy, but they’re very (very) poorly named.
The following four are pretty important, for starters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;$@&lt;/strong&gt;: the name of the target file (the one before the colon)&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;$&amp;lt;&lt;/strong&gt;: the name of the first (or only) dependency (the first one after the colon)&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;$^&lt;/strong&gt;: the names of all the dependencies (space separated)&lt;/li&gt;
  &lt;li&gt;
&lt;strong&gt;$&lt;/strong&gt;*: the stem (the bit which matches the % wildcard in a rule definition. (I’m not using this now, but it could be handy someday)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;These special variables, combined with wildcards (the &lt;strong&gt;%&lt;/strong&gt; symbol in make), allow us
to compactly eliminate all the redundancy. An example will probably clarify it
better than a thousand words.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-make"&gt;&lt;span class="nf"&gt;myapp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;main.o helper.o&lt;/span&gt;
    gcc &lt;span class="nv"&gt;$^&lt;/span&gt; -o &lt;span class="nv"&gt;$@&lt;/span&gt;

&lt;span class="c"&gt;# when looking for something that ends in .o, look&lt;/span&gt;
&lt;span class="c"&gt;# for the same thing ending in .c and run gcc on it&lt;/span&gt;
&lt;span class="nf"&gt;%.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;%.c&lt;/span&gt;
    gcc -c &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There, redundancy solved! We only had to specify the name of the executable, and the object files
that are necessary to build the executable exactly once. If you expand
the variables in your head, it also looks quite logical.&lt;/p&gt;

&lt;p&gt;Now there are some tiny tweaks that I do quite often to add
some commandline overridability:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-make"&gt;&lt;span class="c"&gt;# if $CC is not set, use gcc as a sensible default&lt;/span&gt;
&lt;span class="nv"&gt;CC&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; gcc

&lt;span class="c"&gt;# if $CFLAGS is not set, be very pedantic and compile&lt;/span&gt;
&lt;span class="c"&gt;# as C11, that should catch some common errors, also&lt;/span&gt;
&lt;span class="c"&gt;# fortify the source, which is a must for security.&lt;/span&gt;
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; -Wall &lt;span class="se"&gt;\&lt;/span&gt;
    -D_FORTIFY_SOURCE&lt;span class="o"&gt;=&lt;/span&gt;2 &lt;span class="se"&gt;\&lt;/span&gt;
    -Wextra -Wcast-align -Wcast-qual -Wpointer-arith &lt;span class="se"&gt;\&lt;/span&gt;
    -Waggregate-return -Wunreachable-code -Wfloat-equal &lt;span class="se"&gt;\&lt;/span&gt;
    -Wformat&lt;span class="o"&gt;=&lt;/span&gt;2 -Wredundant-decls -Wundef &lt;span class="se"&gt;\&lt;/span&gt;
    -Wdisabled-optimization -Wshadow -Wmissing-braces &lt;span class="se"&gt;\&lt;/span&gt;
    -Wstrict-aliasing&lt;span class="o"&gt;=&lt;/span&gt;2 -Wstrict-overflow&lt;span class="o"&gt;=&lt;/span&gt;5 -Wconversion &lt;span class="se"&gt;\&lt;/span&gt;
    -Wno-unused-parameter &lt;span class="se"&gt;\&lt;/span&gt;
    -pedantic -std&lt;span class="o"&gt;=&lt;/span&gt;c11

&lt;span class="nf"&gt;myapp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;main.o helper.o&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$^&lt;/span&gt; -o &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# when looking for something that ends in .o, look&lt;/span&gt;
&lt;span class="c"&gt;# for the same thing ending in .c and run gcc on it&lt;/span&gt;
&lt;span class="nf"&gt;%.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;%.c&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -c &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That cranks the warnings up to 11, which is often
a good thing.&lt;sup id="fnref:4"&gt;&lt;a href="#fn:4" class="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; It’s a good idea to turn the warnings on when
you start your project. Solving the deluge of warnings that
can come out of a mature project when going from no flags
to very pedantic is not fun.&lt;/p&gt;

&lt;h3 id="debug-and-release-builds"&gt;Debug and release builds&lt;/h3&gt;

&lt;p&gt;Quite often, you’d want to compile in debug mode but be
able to run&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-bash"&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make release&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you’re done, spitting out a fully optimized and stripped
executable.&lt;/p&gt;

&lt;p&gt;In make, there are often quite a few ways to achieve the
same thing, adding to the confusion. For debug and release
builds, I personally went for something really simple, expanding
our last example:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-make"&gt;&lt;span class="c"&gt;# if $CC is not set, use gcc as a sensible default&lt;/span&gt;
&lt;span class="nv"&gt;CC&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; gcc

&lt;span class="c"&gt;# if $CFLAGS is not set, be very pedantic and compile&lt;/span&gt;
&lt;span class="c"&gt;# as C11, that should catch some common errors, also&lt;/span&gt;
&lt;span class="c"&gt;# fortify the source, which is a must for security.&lt;/span&gt;
&lt;span class="nv"&gt;CFLAGS&lt;/span&gt; &lt;span class="o"&gt;?=&lt;/span&gt; -Wall &lt;span class="se"&gt;\&lt;/span&gt;
    -D_FORTIFY_SOURCE&lt;span class="o"&gt;=&lt;/span&gt;2 &lt;span class="se"&gt;\&lt;/span&gt;
    -Wextra -Wcast-align -Wcast-qual -Wpointer-arith &lt;span class="se"&gt;\&lt;/span&gt;
    -Waggregate-return -Wunreachable-code -Wfloat-equal &lt;span class="se"&gt;\&lt;/span&gt;
    -Wformat&lt;span class="o"&gt;=&lt;/span&gt;2 -Wredundant-decls -Wundef &lt;span class="se"&gt;\&lt;/span&gt;
    -Wdisabled-optimization -Wshadow -Wmissing-braces &lt;span class="se"&gt;\&lt;/span&gt;
    -Wstrict-aliasing&lt;span class="o"&gt;=&lt;/span&gt;2 -Wstrict-overflow&lt;span class="o"&gt;=&lt;/span&gt;5 -Wconversion &lt;span class="se"&gt;\&lt;/span&gt;
    -Wno-unused-parameter &lt;span class="se"&gt;\&lt;/span&gt;
    -pedantic -std&lt;span class="o"&gt;=&lt;/span&gt;c11

&lt;span class="nv"&gt;CFLAGS_DEBUG&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; -g3 &lt;span class="se"&gt;\&lt;/span&gt;
    -O &lt;span class="se"&gt;\&lt;/span&gt;
    -DDEBUG

&lt;span class="nv"&gt;CFLAGS_RELEASE&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; -O2 &lt;span class="se"&gt;\&lt;/span&gt;
    -march&lt;span class="o"&gt;=&lt;/span&gt;native &lt;span class="se"&gt;\&lt;/span&gt;
    -mtune&lt;span class="o"&gt;=&lt;/span&gt;native &lt;span class="se"&gt;\&lt;/span&gt;
    -ftree-vectorize

&lt;span class="c"&gt;# the default target is debug&lt;/span&gt;
&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;debug&lt;/span&gt;

&lt;span class="c"&gt;# when the target is debug,&lt;/span&gt;
&lt;span class="c"&gt;# add CFLAGS_DEBUG to CFLAGS&lt;/span&gt;
&lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;CFLAGS += $(CFLAGS_DEBUG)&lt;/span&gt;
&lt;span class="nf"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;myapp&lt;/span&gt;

&lt;span class="c"&gt;# when the target is release,&lt;/span&gt;
&lt;span class="c"&gt;# add CFLAGS_RELEASE to CFLAGS&lt;/span&gt;
&lt;span class="nf"&gt;release&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;CFLAGS += $(CFLAGS_RELEASE)&lt;/span&gt;
&lt;span class="nf"&gt;release&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;myapp&lt;/span&gt;

&lt;span class="nf"&gt;myapp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;main.o helper.o&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$^&lt;/span&gt; -o &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# when looking for something that ends in .o, look&lt;/span&gt;
&lt;span class="c"&gt;# for the same thing ending in .c and run gcc on it&lt;/span&gt;
&lt;span class="nf"&gt;%.o&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;%.c&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; -c &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;debug release&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re using &lt;strong&gt;target-specific variables&lt;/strong&gt; to get
the job done. Notice that we added release and debug
as phony targets because they don’t generate files
called release and debug. Also note that both
target and debug have myapp as a dependency, so
they will both build the executable we want,
albeit with different flags.&lt;/p&gt;

&lt;h3 id="taking-into-account-differences-in-operating-systems-or-compilers"&gt;Taking into account differences in operating systems or compilers&lt;/h3&gt;

&lt;p&gt;So now you’ve got your fancy project building in debug and release modes
and you’re really happy about it, but what when you’ve been developing
on OSX and want to build &amp;amp; run it on Linux as well? Or what if
you want to support clang because of its awesome diagnostics?&lt;/p&gt;

&lt;p&gt;With make, you can run some commands to find out what your environment
looks like and make choices based on that. The long and short of it
can be found on &lt;a href="http://stackoverflow.com/questions/714100/os-detecting-makefile"&gt;stack overflow&lt;/a&gt;.
I’ll repaste my own edited version here for posterity:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-make"&gt;&lt;span class="cp"&gt;ifeq ($(OS),Windows_NT)&lt;/span&gt;
    CCFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -D WIN32
&lt;span class="cp"&gt;    ifeq ($(PROCESSOR_ARCHITECTURE),AMD64)&lt;/span&gt;
        CCFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -D AMD64
&lt;span class="cp"&gt;    endif&lt;/span&gt;
&lt;span class="cp"&gt;    ifeq ($(PROCESSOR_ARCHITECTURE),x86)&lt;/span&gt;
        CCFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -D IA32
&lt;span class="cp"&gt;    endif&lt;/span&gt;
&lt;span class="cp"&gt;else&lt;/span&gt;
&lt;span class="c"&gt;    # tries to find the compiler name&lt;/span&gt;
    CC_VERSION :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; --version &lt;span class="p"&gt;|&lt;/span&gt; head -1 &lt;span class="p"&gt;|&lt;/span&gt; cut -f1 -d&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;    # tries to discern what UNIX-like OS we're running on&lt;/span&gt;
    UNAME_S :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell uname -s&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;    ifeq ($(UNAME_S),Linux)&lt;/span&gt;
        CCFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -D LINUX
&lt;span class="cp"&gt;    endif&lt;/span&gt;
&lt;span class="cp"&gt;    ifeq ($(UNAME_S),Darwin)&lt;/span&gt;
        CCFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -D OSX
&lt;span class="cp"&gt;    endif&lt;/span&gt;

&lt;span class="cp"&gt;    ifneq (,$(findstring clang,$(CC_VERSION)))&lt;/span&gt;
        CCFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -D CLANG

&lt;span class="c"&gt;        # -pthread is not necessary when using Clang on Darwin&lt;/span&gt;
&lt;span class="cp"&gt;        ifneq ($(UNAME_S),Darwin)&lt;/span&gt;
            CCFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -pthread
&lt;span class="cp"&gt;        endif&lt;/span&gt;
&lt;span class="cp"&gt;    else&lt;/span&gt;
        CCFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -D GCC
        CCFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -pthread

&lt;span class="c"&gt;        # at least on OS X 10.7.5, the apple linker does&lt;/span&gt;
&lt;span class="c"&gt;        # not understand AVX and gcc uses it when you specify&lt;/span&gt;
&lt;span class="c"&gt;        # -mavx or -march=native and you have a CPU&lt;/span&gt;
&lt;span class="c"&gt;        # with AVX or better&lt;/span&gt;
&lt;span class="cp"&gt;        ifeq ($(UNAME_S),Darwin)&lt;/span&gt;
            CCFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -mno-avx
&lt;span class="cp"&gt;        endif&lt;/span&gt;
&lt;span class="cp"&gt;    endif&lt;/span&gt;

    UNAME_P :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell uname -m&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="cp"&gt;    ifeq ($(UNAME_P),x86_64)&lt;/span&gt;
        CCFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -D AMD64
&lt;span class="cp"&gt;    endif&lt;/span&gt;
&lt;span class="cp"&gt;    ifneq ($(filter %86,$(UNAME_P)),)&lt;/span&gt;
        CCFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -D IA32
&lt;span class="cp"&gt;    endif&lt;/span&gt;
&lt;span class="cp"&gt;    ifneq ($(filter arm%,$(UNAME_P)),)&lt;/span&gt;
        CCFLAGS +&lt;span class="o"&gt;=&lt;/span&gt; -D ARM
&lt;span class="cp"&gt;    endif&lt;/span&gt;
&lt;span class="cp"&gt;endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It adds define flags so that whenever necessary, it can be used
to partially define blocks of code based on OS, CPU or compiler.
Of course I should note that this is best used when there are no
obvious alternatives, nobody likes &lt;code&gt;#ifdef&lt;/code&gt; soup.&lt;/p&gt;

&lt;p&gt;By the way, I was bashing autotools earlier for being a mess and
creating unreadable makefiles, but it remains an oft-used toolset for
cross-platform building.  Is it because of inertia? Well… yes and no.
Sometimes building on many (very) different operating systems becomes
quite a chore, and autotools makes some of that, well, easier. It was
built long ago for the express purpose of generating cross-platform
makefiles, which is also why it panders to the lowest common denominator
by not using any of the newer features that modern make has. Which in
turn generates ugly makefiles.&lt;/p&gt;

&lt;p&gt;There are &lt;a href="http://cgit.freedesktop.org/libva/"&gt;a lot&lt;/a&gt; of
&lt;a href="http://cgit.freedesktop.org/xorg/driver/xf86-video-intel/"&gt;examples&lt;/a&gt; of
&lt;a href="http://www.mplayerhq.hu/design7/news.html"&gt;projects&lt;/a&gt; using autotools to
great effect, even maintaining almost readable autoconf.ac files.  One
could copy and paste given a bit of effort and after a while you could
be an autotools adept too (not a wizard, I suppose there are only 3
people in the world like that).&lt;/p&gt;

&lt;p&gt;A decent alternative is &lt;a href="http://www.cmake.org/"&gt;cmake&lt;/a&gt;, which tends to
be a bit more readable, and can generate makefiles on UNIX platforms and
visual studio project files on windows, if that’s your thing.&lt;/p&gt;

&lt;p&gt;But when your project exhibits just slight differences between OS or
compiler toolchains, there’s no need to take the plunge and migrate to
autotools, cmake or anything else just yet. We can make do with modern
make, and still keep it quite readable.&lt;/p&gt;

&lt;p&gt;Oh, and there’s another thing cmake, autotools and its ilk are pretty
good at: finding dependencies such as libraries. This used to be much
more important and difficult to do with make. But thanks to the rise of
&lt;a href="http://www.freedesktop.org/wiki/Software/pkg-config/"&gt;pkg-config&lt;/a&gt;, I
find that plain make will do fine for smaller projects. An example from
&lt;a href="https://github.com/aktau/hhpc/blob/master/Makefile"&gt;one of my projects&lt;/a&gt;
which uses &lt;em&gt;pkg-config&lt;/em&gt; to find where the X11 libraries and headers
files are located on the target system:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-make"&gt;&lt;span class="k"&gt;$(&lt;/span&gt;EXECUTABLE&lt;span class="k"&gt;)&lt;/span&gt;: &lt;span class="k"&gt;$(&lt;/span&gt;OBJECTS&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell pkg-config --libs x11&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="nv"&gt;$@&lt;/span&gt; &lt;span class="nv"&gt;$^&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;

%.o: %.c
    &lt;span class="k"&gt;$(&lt;/span&gt;CC&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell pkg-config --cflags x11&lt;span class="k"&gt;)&lt;/span&gt; -c &lt;span class="nv"&gt;$&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;CFLAGS&lt;span class="k"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
&lt;li id="fn:1"&gt;
      &lt;p&gt;Sweet nostalgia, Dev-C++ was my first real IDE, it helped me form my knowledge of C by being easy to use yet not having auto-completion, which cemented a lot of important functions in my muscle memory. &lt;a href="#fnref:1" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;Note that I’m describing makefiles for a C project here, but any developer worth her salt should be able to see that it’s applicable to much more. In fact I use make in combination with &lt;a href="https://github.com/jordansissel/fpm"&gt;fpm&lt;/a&gt; to build .deb files for debian/ubuntu, all I have to do is run &lt;code&gt;make deb&lt;/code&gt;. &lt;a href="#fnref:2" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:3"&gt;
      &lt;p&gt;Some might start protesting now, as they’ve seen “outputs” like &lt;strong&gt;install, uninstall, clean, etc.&lt;/strong&gt; that don’t generate files called install, uninstall or clean. The thing is that these targets are special, and they are usually indicated as such by a special target called &lt;strong&gt;.PHONY&lt;/strong&gt;. Make doesn’t need or want to know about the files generated by phony rules. Phony rules will always execute when called, multiple invocations to &lt;code&gt;make install&lt;/code&gt; will, by default, do the same thing. If you forget to add a target such as &lt;strong&gt;install&lt;/strong&gt; to the phony rules, it will still work of course, because your install rules don’t generate a file called install and thus make will keep executing it.  Correctly specifying the phony rules is cleaner though. &lt;a href="#fnref:3" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:4"&gt;
      &lt;p&gt;Of course, there are some flags that might be a little bit too pedantic. For example, when doing game development it’s often useful to do some &lt;a href="http://graphics.stanford.edu/~seander/bithacks.html"&gt;bit twiddling&lt;/a&gt;, compare disparate number types and do dirty things with pointers.  In that case it might not be worth it or even possible to prevent all the warnings by casting to the appropriate type. In that case, feel free to disable some flags. &lt;a href="#fnref:4" class="reversefootnote"&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content>
    <summary type="html">&lt;p&gt;Looking for an easy to use build tool? Project not yet large enough to
warrant cmake? Downright scared of autotools (which generates the
scariest kind of makefiles)? May I present… make!&lt;/p&gt;

</summary>
  </entry>
</feed>
